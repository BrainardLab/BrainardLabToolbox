function plotMajorAxes(varargin)
% Plots ellipse major axes for CCTE subjects 
%
% Syntax:
%    plotMajorAxes
%
% Description:
%    This routine finds and plots the major axes of ellipses fitted to 
%    subjects' Cambridge Colour Test results, and compares this to their 
%    anomaloscope fit lines.  The routine produces and saves two plots:
%    the first plots the major axis for each subject, and the second plots
%    each subject's fitted anomaloscope slope against their CCT major axis
%    slope. Major axis slopes were computed by finding the least-squares  
%    fit line for the points generated by our ellipse-fitting routines. The 
%    nine subjects plotted are those who were tested on both the CCT and 
%    the anomaloscope. 
%
% Inputs
%    none
%
% Outputs
%    none. Saves plots as PDF files in an experimental directory
%
% Optional key-value pairs
%    'groupSubjects'  -logical indicating whether to use a different plot
%                      color for each individual subject (false) or each 
%                      group of subjects (true). Default is false. 

% History:
%    07/30/19  dce       Wrote routine. Ellipse-fitting routine from dhb 

%% Parse input
p = inputParser;
p.addParameter('groupSubjects', false, @(x) (islogical(x)));
p.parse(varargin{:});

%% Initial parameters
% Subject IDs 
subjects = [3003 3004 3006 3007 3009 3011 3012 3016 3019]; 

% Plot colors 
if p.Results.groupSubjects
    colors = [1 1 0; 0 0 1; 0 1 1; 0 1 1; 0 0 1; 0 0 1; 0 0 1; 0 0 1; 0 0 1]; 
else
    colors = [1 1 0; 1 0 1; 0 1 1; 0 0.4470 0.7410; 0.8500 0.3250 0.0980;...
    0.9290 0.6940 0.1250; 0.4940 0.1840 0.5560; 0.4660 0.6740 0.1880;...
    0.3010 0.7450 0.9330];
end

% Templates for directory name and file name
directoryTemplate = '/Users/deena/Dropbox (Aguirre-Brainard Lab)/MTRP_data/Exp_CCTE/Subject_MELA_';
fileTemplate = 'MELA_';

% Load anomaloscope data and save in cell array for easy access 
load('anomaloscopeData'); 
anomaloscopeCell = {MELA_3003_X MELA_3003_Y; MELA_3004_X MELA_3004_Y;...
    MELA_3006_X MELA_3006_Y; MELA_3007_X MELA_3007_Y; MELA_3009_X...
    MELA_3009_Y; MELA_3011_X MELA_3011_Y; MELA_3012_X MELA_3012_Y;...
    MELA_3016_X MELA_3016_Y; MELA_3019_X MELA_3019_Y};

% Initialize figures
close all; 
figure(1)
hold on;
figure(2)
hold on; 

%% Loop through subjects and add their fit lines to plots
for ii = 1:length(subjects)
    % Build directory name and filename
    subjectID = subjects(ii);
    directory = [directoryTemplate num2str(subjectID)];
    fileName = [fileTemplate num2str(subjectID) '_1.txt'];
    
    % Parse the CCTE file to get subject data
    [center_v_prime_w, center_u_prime_w, azimuthsTable] = ParseCCTTextfile(fullfile(directory, fileName));
    
    % Calculate u_prime and v_prime coordinates
    highestIndex = size(azimuthsTable, 1);
    u_prime = zeros(highestIndex,1);
    v_prime = zeros(highestIndex,1);
    for i = 1:highestIndex
        u_prime(i) = cos(azimuthsTable(i,3)) * azimuthsTable(i,1) + center_u_prime_w;
        v_prime(i) = sin(azimuthsTable(i,3)) * azimuthsTable(i,1) + center_v_prime_w;
    end
    
    % Fit ellipse to subject data
    ellipseFit = fitEllipse(u_prime, v_prime, center_u_prime_w, center_v_prime_w);
    
    % Find major axis line by calculating best fit line for ellipse 
    % coordinates. Add this line to the first figure
    figure(1); 
    axisFit = polyfit(ellipseFit(1,:),ellipseFit(2,:),1);
    plot(ellipseFit(1,:), polyval(axisFit,ellipseFit(1,:)), 'Color',...
        colors(ii,:), 'LineWidth', 1.5);

    % In the second figure, plot major axis slope against anomaloscope data
    figure(2);
    anomaloscopeX = anomaloscopeCell{ii,1};
    anomaloscopeY = anomaloscopeCell{ii,2};
    anomaloscopeFit = polyfit(anomaloscopeX, anomaloscopeY, 1);
    plot(anomaloscopeFit(1), axisFit(1), 's', 'MarkerSize', 10,...
        'MarkerEdgeColor', colors(ii,:), 'MarkerFaceColor', colors(ii,:)); 
end 

%% Clean up plot 1 
figure(1); 
% Legend 
if p.Results.groupSubjects
    legend('Deuteranopes Long', 'Deuteranopes Short', 'Protanopes',...
        'AutoUpdate','off');
else 
    legend(['MELA\_3003'; 'MELA\_3004'; 'MELA\_3006';'MELA\_3007';...
        'MELA\_3009'; 'MELA\_3011'; 'MELA\_3012'; 'MELA\_3016';...
        'MELA\_3019'], 'AutoUpdate','off'); 
end

%  Move MELA_3003 line to top
f=get(gca,'Children');
uistack(f(9),'top'); 

% Plot center 
plot(center_u_prime_w, center_v_prime_w, 'r*', 'HandleVisibility','off')
axis([0.12 0.28 0.45 0.5]);
title('CCT Major Axes', 'FontSize', 16);
xlabel('u\_prime', 'FontSize', 14);
ylabel('v\_prime', 'FontSize', 14);

%% Clean up plot 2 
figure(2); 
% Legend 
if p.Results.groupSubjects
    legend('Deuteranopes Long', 'Deuteranopes Short', 'Protanopes');
else 
    legend(['MELA\_3003'; 'MELA\_3004'; 'MELA\_3006';'MELA\_3007';...
        'MELA\_3009'; 'MELA\_3011'; 'MELA\_3012'; 'MELA\_3016';...
        'MELA\_3019']); 
end 
title('Comparison of Anomaloscope and CCTE Major Axis Slopes', ...
    'FontSize', 16);
xlabel('Anomaloscope Slope', 'FontSize', 14);
ylabel('CCTE Major Axis Slope', 'FontSize', 14);

%% Save results 
dir1 = '/Users/deena/Dropbox (Aguirre-Brainard Lab)/MELA_analysis/projectDichromat/CCTE major axis plots'; 
dir2 = '/Users/deena/Dropbox (Aguirre-Brainard Lab)/MELA_analysis/projectDichromat/CCTE anomaloscope comparison plots'; 
if p.Results.groupSubjects
    fName = 'groupPlot';
else 
    fName = 'subjectPlot';
end 
figure(1);
print('-bestfit', fullfile(dir1, ['majorAxes_' fName]), '-dpdf');
figure(2); 
print('-bestfit', fullfile(dir2, ['CCTEAnomaloscope_' fName]), '-dpdf');
end

% Ellipse-fitting routine from dhb
function fitEllipseIn2D = fitEllipse(u_prime, v_prime, center_u_prime_w, center_v_prime_w)
theData = [u_prime-center_u_prime_w v_prime-center_v_prime_w zeros(size(u_prime))]';
initialFactor = 15;
ellRanges = max(theData,[],2)-min(theData,[],2);
ellParams0 = [1./ellRanges'.^0.5 0 0 0]';
ellParams0(1:3) = ellParams0(1:3)*initialFactor;
ellParams0(isinf(ellParams0)) = 1;
[fitA,fitAinv,fitQ,fitEllParams] = EllipsoidFit(theData,ellParams0,false,true);
fitCenter = [center_u_prime_w center_v_prime_w 0]';

% Get ellipse from fit
nThetaEllipse = 200;
circleIn2D = UnitCircleGenerate(nThetaEllipse);
circleIn3DPlane = [circleIn2D(1,:) ; circleIn2D(2,:) ; zeros(size(circleIn2D(1,:)))];
fitEllipseIn3DPlane = PointsOnEllipsoidFind(fitQ,circleIn3DPlane,fitCenter);
fitEllipseIn2D = fitEllipseIn3DPlane(1:3,:);
end