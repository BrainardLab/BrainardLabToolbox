function oldFormatCalStruct = OldFormatCalStructFromNewFormatCalStruct(newFormatCalStruct)

    calStruct = newFormatCalStruct; 
    
    % Top level struct
    cal = struct(   'describe',      struct(), ...
                    'manual',        struct(), ...
                    'bgColor',       CalStructGet(calStruct, 'bgColor'), ...
                    'fgColor',       CalStructGet(calStruct, 'fgColor'), ...
                    'usebitspp',     CalStructGet(calStruct, 'usebitspp'), ...
                    'nDevices',      CalStructGet(calStruct, 'nDevices'), ...     
                    'nPrimaryBases', CalStructGet(calStruct, 'nPrimaryBases'), ... 
                    'basicmeas',     struct(), ...
                    'bgmeas',        struct(), ... 
                    'rawdata',       struct(), ...
                    'S_device',      CalStructGet(calStruct, 'S_device'), ...
                    'P_device',      CalStructGet(calStruct, 'P_device'), ...
                    'T_device',      CalStructGet(calStruct, 'T_device'), ...
                    'gammaInput',    CalStructGet(calStruct, 'gammaInput'), ...
                    'gammaFormat',   CalStructGet(calStruct, 'gammaFormat'), ...
                    'gammaTable',    CalStructGet(calStruct, 'gammaTable'), ...
                    'S_ambient',     CalStructGet(calStruct, 'S_ambient'), ...
                    'P_ambient',     CalStructGet(calStruct, 'P_ambient'), ...
                    'T_ambient',     CalStructGet(calStruct, 'T_ambient') ...
                );
     
    % describe sub-struct
    cal.describe = struct(  'S',                                [], ...
                            'calibrationType',                  [], ...
                            'whichScreen',                      [], ...
                            'blankOtherScreen',                 [], ...
                            'whichBlankScreen',                 [], ...
                            'blankSettings',                    [], ...
                            'meterDistance',                    [], ...
                            'monitor',                          [], ...
                            'comment',                          [], ...
                            'gamma',                            [], ...
                            'leaveRoomTime',                    [], ...
                            'nAverage',                         [], ...
                            'nMeas',                            [], ...
                            'boxSize',                          [], ...
                            'boxOffsetX',                       [], ...
                            'boxOffsetY',                       [], ...
                            'HDRProjector',                     [], ...
                            'promptforname',                    [], ...
                            'whichMeterType',                   [], ...
                            'dacsize',                          [], ...
                            'svnInfo',                          [],...
                            'caltype',                          [], ...
                            'computer',                         [], ...
                            'driver',                           [], ...
                            'hz',                               [], ...
                            'screenSizePixel',                  [], ...
                            'displayDescription',               [], ...
                            'who',                              [], ...
                            'date',                             [], ...
                            'program',                          [], ...
                            'graphicsEngine',                   [], ...
                            'isExportedFromNewStyleCalStruct',  1, ... % new field to indicate that this has been exported from new style cal format
                            'calStructRevisionNo',              [] ...
             );
             
    fieldNamesArray = fieldnames(cal.describe);
    for k = 1:length(fieldNamesArray)
        
        if isempty(eval(sprintf('cal.describe.%s',fieldNamesArray{k})))
            sprintf('cal.describe.%s = CalStructGet(calStruct,''%s'');', fieldNamesArray{k}, fieldNamesArray{k})
            eval(sprintf('cal.describe.%s = CalStructGet(calStruct, ''%s'');', fieldNamesArray{k}, fieldNamesArray{k}));
        end
    end
    
    % cal.manual substruct
    cal.manual.use = 0;
    
    % cal.basicmeas substruct
    cal.basicmeas = struct( 'settings', [], ...
                            'spectra1', [], ...
                            'spectra2', [] ...
                        );      
    cal.basicmeas.settings = CalStructGet(calStruct, 'basicmeas.settings');
    cal.basicmeas.spectra1 = CalStructGet(calStruct, 'basicmeas.spectra1');
    cal.basicmeas.spectra2 = CalStructGet(calStruct, 'basicmeas.spectra2');
                       
    
    % cal.bgmeas substruct
    cal.bgmeas = struct(    'bgSettings',[], ...
                            'settings',  [], ...
                            'spectra',   [] ...
                        );
    cal.bgmeas.bgSettings = CalStructGet(calStruct, 'bgmeas.bgSettings');
    cal.bgmeas.settings   = CalStructGet(calStruct, 'bgmeas.settings');
    cal.bgmeas.spectra    = CalStructGet(calStruct, 'bgmeas.spectra');
                    
                    
    % cal.rawdata substruct
    cal.rawdata = struct(   'monSpd',           [], ...  
                            'monIndex',         [], ...  
                            'mon',              [], ...  
                            'rawGammaTable',    [], ...  
                            'monSVs',           [], ...  
                            'rawGammaInput',    [] ...  
                    );
    cal.rawdata.monSpd           = CalStructGet(calStruct, 'monSpd'); 
    cal.rawdata.monIndex         = CalStructGet(calStruct, 'monIndex');
    cal.rawdata.mon              = CalStructGet(calStruct, 'mon');
    cal.rawdata.rawGammaTable    = CalStructGet(calStruct, 'rawGammaTable');
    cal.rawdata.monSVs           = CalStructGet(calStruct, 'monSVs');
    cal.rawdata.rawGammaInput	 = CalStructGet(calStruct, 'rawGammaInput');

    % return it
    oldFormatCalStruct = cal;
end
