% Method to transform a calStruct generated by @Calibrator to a calStruct
% with the old-style format (expected by old-style calibration routines).
%
% Usage:
% oldFormatCalStruct = Calibrator.calStructWithOldFormat(newFormatCalStruct);
% 
% 4/16/2014   npc   Wrote it.
%

function oldFormatCalStruct = calStructWithOldFormat(obj, newFormatCalStruct)
% oldFormatCalStruct = calStructWithOldFormat(newFormatCalStruct)
%
% Description:
% Method to transform a calStruct generated by @Calibrator to a calStruct
% with the old-style format.
%
% Output:
% calStruct - A cal struct compatible with that expected 

    calStruct = newFormatCalStruct; 
    
    cal = struct(   'describe',      struct(), ...
                    'manual',        struct(), ...
                    'bgColor',       calStruct.describe.bgColor, ...
                    'fgColor',       calStruct.describe.fgColor, ...
                    'usebitspp',     calStruct.describe.useBitsPP, ...
                    'nDevices',      calStruct.describe.displayPrimariesNum, ...     
                    'nPrimaryBases', calStruct.describe.primaryBasesNum, ... 
                    'basicmeas',     struct(), ...
                    'bgmeas',        struct(), ... 
                    'rawdata',       struct(), ...
                    'S_device',      calStruct.processedData.S_device, ...
                    'P_device',      calStruct.processedData.P_device, ...
                    'T_device',      calStruct.processedData.T_device, ...
                    'gammaInput',    calStruct.processedData.gammaInput, ...
                    'gammaFormat',   calStruct.processedData.gammaFormat, ...
                    'gammaTable',    calStruct.processedData.gammaTable, ...
                    'S_ambient',     calStruct.processedData.S_ambient, ...
                    'P_ambient',     calStruct.processedData.P_ambient, ...
                    'T_ambient',     calStruct.processedData.T_ambient ...
                );
            
    % cal.describe struct
    meterType = 0;
    if (isa(obj.radiometerObj, 'Radiometer'))
        % during calibration, get meter type from @Radiometer
        if (strcmp(obj.radiometerObj.deviceModelName, 'PR-650'))
            meterType = 1;
        elseif (strcmp(obj.radiometerObj.deviceModelName, 'PR-655'))
            meterType = 4;
        elseif (strcmp(obj.radiometerObj.deviceModelName, 'PR-670'))
            meterType = 5;    
        end        
    else
        % during analysis, get meter type from calStruct
        if (strcmp(calStruct.describe.meterModel, 'PR-650'))
            meterType = 1;
        elseif (strcmp(calStruct.describe.meterModel, 'PR-655'))
            meterType = 4;
        elseif (strcmp(calStruct.describe.meterModel, 'PR-670'))
            meterType = 5;    
        end  
    end
    
    cal.describe = struct(  'S',                    obj.rawData.S, ...
                            'calibrationType',      calStruct.describe.displayDeviceType, ...
                            'whichScreen',          calStruct.describe.whichScreen, ...
                            'blankOtherScreen',     calStruct.describe.blankOtherScreen, ...
                            'whichBlankScreen',     calStruct.describe.whichBlankScreen, ...
                            'blankSettings',        calStruct.describe.blankSettings, ...
                            'meterDistance',        calStruct.describe.meterDistance, ...
                            'monitor',              calStruct.describe.displayDeviceName, ...
                            'comment',              calStruct.describe.comment, ...
                            'gamma',                calStruct.describe.gamma, ...
                            'leaveRoomTime',        calStruct.describe.leaveRoomTime, ...
                            'nAverage',             calStruct.describe.nAverage, ...
                            'nMeas',                calStruct.describe.nMeas, ...
                            'boxSize',              calStruct.describe.boxSize, ...
                            'boxOffsetX',           calStruct.describe.boxOffsetX, ...
                            'boxOffsetY',           calStruct.describe.boxOffsetY, ...
                            'HDRProjector',         0, ...
                            'promptforname',        1, ...
                            'whichMeterType',       meterType, ...
                            'dacsize',              calStruct.describe.dacsize, ...
                            'svnInfo',              struct(), ... % : [1x1 struct]
                            'caltype',              calStruct.describe.displayDeviceType, ...
                            'computer',             calStruct.describe.computerInfo, ...
                            'driver',               calStruct.describe.driver, ...
                            'hz',                   calStruct.describe.hz, ...
                            'screenSizePixel',      calStruct.describe.screenSizePixel, ...
                            'displayDescription',   calStruct.describe.displaysDescription, ...
                            'who',                  calStruct.describe.who, ...
                            'date',                 calStruct.describe.date, ...
                            'program',              calStruct.describe.executiveScriptName, ...
                            'graphicsEngine',       obj.graphicsEngine, ...
                            'isExportedFromNewStyleCalStruct',  1, ... % new field to indicate that this has been exported from new style cal format
                            'newStyleCalStructRevisionNo',   obj.calStructRevisionNo ...
                     );
                 
    % cal.manual struct
    cal.manual.use = 0;
    
    
    % cal.basicmeas struct
    cal.basicmeas = struct( 'settings', calStruct.basicLinearitySetup.settings, ...
                            'spectra1', calStruct.rawData.basicLinearityMeasurements1', ...
                            'spectra2', calStruct.rawData.basicLinearityMeasurements2' ...
                        );
    
    % cal.bgmeas struct
    cal.bgmeas = struct(    'bgSettings', calStruct.backgroundDependenceSetup.bgSettings, ...
                            'settings',   calStruct.backgroundDependenceSetup.settings, ...
                            'spectra',    [] ...
                        );
    
    spectralSamples = size(calStruct.rawData.gammaCurveMeanMeasurements,3);
    gammaSamples    = calStruct.describe.nMeas;
    primariesNum    = calStruct.describe.displayPrimariesNum;
    trialsNum       = calStruct.describe.nAverage;
    
    backgroundSettingsNum = size(calStruct.backgroundDependenceSetup.bgSettings,2);
    targetSettingsNum     = size(calStruct.backgroundDependenceSetup.settings,2);
    
    for backgroundSettingsIndex = 1:backgroundSettingsNum
       tmp = zeros(spectralSamples,targetSettingsNum); 
       for targetSettingsIndex = 1: targetSettingsNum
           tmp(:, targetSettingsIndex) = ...
               reshape(squeeze(obj.rawData.backgroundDependenceMeasurements(backgroundSettingsIndex, targetSettingsIndex, :)), ...
               [spectralSamples  1] );
       end
       cal.bgmeas.spectra{backgroundSettingsIndex} = tmp;
    end
    
    
    % cal.rawdata struct
    cal.rawdata = struct(   'monSpd', [], ...  
                            'monIndex', [], ...  
                            'mon',              zeros(spectralSamples*gammaSamples, primariesNum), ... 
                            'rawGammaTable',    calStruct.rawData.gammaTable, ...
                            'monSVs',           calStruct.processedData.monSVs, ...
                            'rawGammaInput',    calStruct.rawData.gammaInput' ...
                    );
                
    for trialIndex = 1:trialsNum 
        for primaryIndex = 1:primariesNum   
            tmp = zeros(spectralSamples*gammaSamples,1);
            for gammaPointIndex = 1:gammaSamples
                firstSample = (gammaPointIndex-1)*spectralSamples + 1;
                lastSample  = gammaPointIndex*spectralSamples;
                tmp(firstSample:lastSample) = ...
                    reshape(calStruct.rawData.gammaCurveMeasurements(trialIndex, primaryIndex, gammaPointIndex, :), ...
                    [1 spectralSamples]);
            end  
            cal.rawdata.monSpd{trialIndex, primaryIndex}   = tmp;
            cal.rawdata.monIndex{trialIndex, primaryIndex} = reshape(calStruct.rawData.gammaCurveSortIndices(trialIndex, primaryIndex,:), [gammaSamples 1]);  
        end
    end
    
    for primaryIndex = 1:primariesNum
        for gammaPointIndex = 1:gammaSamples
            firstSample = (gammaPointIndex-1)*spectralSamples + 1;
            lastSample  = gammaPointIndex*spectralSamples;
            cal.rawdata.mon(firstSample:lastSample, primaryIndex) = ...
                reshape(squeeze(calStruct.rawData.gammaCurveMeanMeasurements(primaryIndex,gammaPointIndex,:)), ...
                [spectralSamples 1]);
        end
    end
    
    
    oldFormatCalStruct = cal;
end

