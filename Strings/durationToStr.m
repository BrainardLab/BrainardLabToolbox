function str = durationToStr(dur, varargin)
% Converts a duration to a human readable string
%
% Syntax:
%   str = durationToString(dur)
%   str = durationToString(...,'dropZero',false);
%   str = durationToString(...,'OxfordComma',false);
%
% Description:
%    Converts a MATLAB duration to an English string, specifying the
%    seperate components, that add up to the total duration. For example,
%    a duration of seconds(65) will convert to '1 minute, and 5 seconds'.
%    Drops empty components of duration (default, override using kwarg
%    'dropZero'.
%
% Inputs:
%    dur           - duration, as generated by duration, days, hours, etc.
%
% Outputs:
%    str           - character array, containing a human readable string in
%                    the format 'Y year(s), D day(s), H hour(s), M
%                    minute(s), S second(s), and MS millisecond(s)'. Adds
%                    plural-s where appropriate.
%
% Optional key/value pairs:
%    'dropZero'    - logical, drop 'empty' components of duration (e.g., '0
%                    minutes'). Default true.
%    'and'         - logical, insert 'and' before final component. Default
%                    true.
%    'OxfordComma' - logical, insert Oxford comma. Is only used if 'and' is
%                    true (i.e., if no 'and', will get a comma before last
%                    component'). Default true.
%
% Examples provided in source code
%
% See also:
%    duration, countToStr

% History:
%    05/11/18  jv  wrote it.

% Examples:
%{
    %% '1 minute, and 5 seconds'
    durationToStr(seconds(65))
%}
%{
    %% '1 minute, 5 seconds'
    durationToStr(seconds(65),'and', false)
%}
%{
    %% '1 minute and 5 seconds'
    durationToStr(seconds(65),'OxfordComma', false)
%}
%{
    %% '0 years, 0 days, 0 hours, 1 minute, 5 seconds, and 0 milliseconds'
    durationToStr(seconds(65),'dropZero', false)
%}

%% Input validation
parser = inputParser();
parser.addRequired('dur',@isduration);
parser.addParameter('dropZero',true,@(x) validateattributes(x,{'logical'},{'scalar'}));
parser.addParameter('and',true,@(x) validateattributes(x,{'logical'},{'scalar'}));
parser.addParameter('OxfordComma',true,@(x) validateattributes(x,{'logical'},{'scalar'}));
parser.parse(dur,varargin{:});

%% Calculate components
yrs = years(floor(years(dur)));
dys = days(floor(days(dur-yrs)));
hrs = hours(floor(hours(dur-yrs-dys)));
mins = minutes(floor(minutes(dur-yrs-dys-hrs)));
secs = seconds(floor(seconds(dur-yrs-dys-hrs-mins)));
msecs = milliseconds(floor(milliseconds(dur-yrs-dys-hrs-mins-secs)));

%% Convert components to strings
yrsStr = countToStr(years(yrs),'year', 'format','%d', 'dropZero',parser.Results.dropZero);
dysStr = countToStr(days(dys),'day', 'format','%d', 'dropZero',parser.Results.dropZero);
hrsStr = countToStr(hours(hrs),'hour', 'format','%d', 'dropZero',parser.Results.dropZero);
minsStr = countToStr(minutes(mins),'minute', 'format','%d', 'dropZero',parser.Results.dropZero);
secsStr = countToStr(seconds(secs),'second', 'format','%d', 'dropZero',parser.Results.dropZero);
msecsStr = countToStr(milliseconds(msecs),'millisecond', 'format','%d', 'dropZero',parser.Results.dropZero);
strComponents = {yrsStr,dysStr,hrsStr,minsStr,secsStr,msecsStr};
strComponents = strComponents(~cellfun(@isempty,strComponents)); % drop empty strings

%% Combine
str = strjoin(strComponents', ', ');

%% Insert 'and'
if parser.Results.and
    str = insertAfter(str,find(str == ',',1,'last'),' and'); 
end

%% Remove Oxford comma
if ~parser.Results.OxfordComma
    str = strrep(str,', and',' and');
end

end