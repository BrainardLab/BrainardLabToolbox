function validatedMondrianColors = GLW_ValidateMondrianColors(desiredMondrianColors, displayTypeID)
% validatedMondrianColors = GLW_ValidateMondrianColors(desiredMondrianColors, displayTypeID)
%
% Description:
% Validates a set of colors for a Mondrian depending on the display type.
%
% Input:
% desiredMondrianColors (MxNx3|cell array|struct) - The desired colors for
%	the Mondrian.
% displayTypeID (integer) - The display ID type of the GLWindow.
%   This value should be generated by GLW_ValidateDisplayType.
%
% Output:
% validatedMondrianColors (cell array) - The validated Mondrian colors for
%   each display in a cell array.

switch displayTypeID
	case {GLWindow.DisplayTypes.Normal, GLWindow.DisplayTypes.BitsPP}
		checkMatrix(desiredMondrianColors);
		desiredMondrianColors = {desiredMondrianColors};
		
	case {GLWindow.DisplayTypes.Stereo, GLWindow.DisplayTypes.StereoBitsPP}
		if iscell(desiredMondrianColors)
			if length(desiredMondrianColors) ~= 2
				error('In Stereo or Stereo-Bits++ mode, cell arrays must only have 2 elements.');
			end
		elseif isstruct(desiredMondrianColors)
			% Validate the fields in the struct.
			GLW_ValidateStructFields(desiredMondrianColors, {'left', 'right'});
			
			desiredMondrianColors = {desiredMondrianColors.left, desiredMondrianColors.right};
		else
			error('In Stereo or Stereo-Bits++ mode, Mondrian colors must be passed as a 1x2 cell array or struct.');
		end
		
		for i = 1:2
			checkMatrix(desiredMondrianColors{i});
		end
		
	case GLWindow.DisplayTypes.HDR
		if iscell(desiredMondrianColors)
			if length(desiredMondrianColors) ~= 2
				error('In HDR mode, cell arrays must only have 2 elements.');
			end
		elseif isstruct(desiredMondrianColors)
			% Validate the fields in the struct.
			GLW_ValidateStructFields(desiredMondrianColors, {'front', 'back'});
			
			desiredMondrianColors = {desiredMondrianColors.front, desiredMondrianColors.back};
		else
			error('In HDR mode, Mondrian colors must be passed as a 1x2 cell array or struct.');
		end
		
		for i = 1:2
			checkMatrix(desiredMondrianColors{i});
		end
		
	case GLWindow.DisplayTypes.StereoHDR
		% The number of colors we expect to be passed.
		numColors = length(GLWindow.DisplayFields.StereoHDR);
		
		if iscell(desiredMondrianColors)
			assert(isvector(desiredMondrianColors) && length(desiredMondrianColors) == numColors, ...
				'GLW_ValidateMondrianColors:InvalidInputDims', ...
				'Mondrian colors defined as a cell array must have %d elements.', ...
				numColors);
		elseif isstruct(desiredMondrianColors)
			% Make sure we have the right fields.
			GLW_ValidateStructFields(desiredMondrianColors, GLWindow.DisplayFields.StereoHDR);
			
			% Pack the colors into a cell array.
			c = cell(1, numColors);
			for i = 1:numColors
				c{i} = desiredMondrianColors.(GLWindow.DisplayFields.StereoHDR{i});
			end
			desiredMondrianColors = c;
		else
			error('In StereoHDR mode, Mondrian colors must be passed as a 1x%d cell or struct.', numColors);
		end
		
		% Check each Mondrian matrix to make sure it's formatted properly.
		for i = 1:numColors
			checkMatrix(desiredMondrianColors{i});
		end
		
	otherwise
		error('Unknown display type ID of %d.', displayTypeID);
end

validatedMondrianColors = desiredMondrianColors;


function checkMatrix(m)
if ~isnumeric(m)
	error('Mondrian matrices must be numeric.');
end

if ndims(m) ~= 3
	error('Mondrian matrices must have 3 dimensions.');
end

if size(m, 3) ~= 3
	error('Mondrian matrices must be MxNx3 in size.');
end
