function validatedGamma = GLW_ValidateGamma(desiredGamma, displayTypeID)
% GLW_ValidateGamma - Validate the gamma based on the display type.
%
% Syntax:
% validatedGamma = GLW_ValidateGamma(desiredGamma, displayTypeID)
%
% Description:
% Checks the gamma based on the display type to make sure
% the right stuff was passed.  A desired gamma of [] or NaN is the same as
% asking for the identity.  All values are verified to be in the [0,1]
% range.
%
% Input:
% desiredGamma (struct | 256x3 | []) - The desired gamma table(s) for
%     specified display type.
% displayTypeID (integer) - The desired display ID type of the GLWindow.
%     This value should be generated by GLWindow.validateDisplayType.
%
% Output:
% validatedGamma (cell array) - The validated gamma input.  Each element of
%     the returned cell array is an individual window's gamma. 

if nargin ~= 2
	error('Usage: validatedGamma = GLW_ValidateGamma(desiredGamma, displayTypeID)');
end

% A value of NaN or empty tells the GLWindow that we should use the
% identity.  Otherwise, we need to make sure the input is valid.
if isempty(desiredGamma)
	% Get rid of the previous value stored.
	clear desiredGamma;
	
	identityGamma = GLWindow.getIdentityGamma;
	
	switch displayTypeID
		case {GLWindow.DisplayTypes.Normal, GLWindow.DisplayTypes.BitsPP}
			desiredGamma{1} = identityGamma;
			
		case {GLWindow.DisplayTypes.Stereo, GLWindow.DisplayTypes.StereoBitsPP}
			desiredGamma{1} = identityGamma;
			desiredGamma{2} = identityGamma;
			
		case GLWindow.DisplayTypes.HDR
			desiredGamma{1} = identityGamma;
			desiredGamma{2} = identityGamma;
		
		case GLWindow.DisplayTypes.StereoHDR
			for i = 1:length(GLWindow.DisplayFields.StereoHDR)
				desiredGamma{i} = identityGamma;
			end
			
		otherwise
			error('Invalid display type "%s".', displayTypeID);
	end
else
	switch displayTypeID
		case {GLWindow.DisplayTypes.Normal, GLWindow.DisplayTypes.BitsPP}
			if isnumeric(desiredGamma)
				desiredGamma = {desiredGamma};
			elseif iscell(desiredGamma)
				% Make sure there is only 1 cell.
				if length(desiredGamma) ~= 1
					error('"desiredGamma" can only have 1 cell entry.');
				end
			else
				error('"desiredGamma" must be numeric or a cell.');
			end
			
		case {GLWindow.DisplayTypes.Stereo, GLWindow.DisplayTypes.StereoBitsPP}
			% For stereo/stereo Bits++ mode, we need a struct passed with 2
			% fields: leftGamma and rightGamma, or as a cell array.
			if isstruct(desiredGamma)
				% Now make sure we have both fields and that they contain legit
				% gamma tables.
				GLW_ValidateStructFields(desiredGamma,  {'leftGamma', 'rightGamma'})
				
				desiredGamma = {desiredGamma.leftGamma, desiredGamma.rightGamma};
			elseif iscell(desiredGamma)
				% Make sure there are only 2 elements to the cell array.
				% One element for the left gamma and one for the right.
				if length(desiredGamma) ~= 2
					error('"desiredGamma" must be a 2 element cell array in stereo mode.');
				end
			else
				error('In stereo-bits++ mode the gamma must be passed as a struct or cell array.');
			end
			
		case GLWindow.DisplayTypes.HDR
			% For HDR mode, we need a frontGamma and backGamma.
			if isstruct(desiredGamma)
				% Now make sure we have both fields and that they contain legit
				% gamma tables.
				GLW_ValidateStructFields(desiredGamma,  {'frontGamma', 'backGamma'})
				
				desiredGamma = {desiredGamma.frontGamma, desiredGamma.backGamma};
			elseif iscell(desiredGamma)
				% Make sure there are only 2 elements to the cell array.
				% One element for the front gamma and one for the back.
				if length(desiredGamma) ~= 2
					error('"desiredGamma" must be a 2 element cell array in HDR mode.');
				end
			else
				error('In HDR mode the gamma must be passed as a struct or cell array.');
			end
			
		case GLWindow.DisplayTypes.StereoHDR
			if isstruct(desiredGamma)
				% Make sure all the displays are defined.
				GLW_ValidateStructFields(desiredGamma, GLWindow.DisplayFields.StereoHDR);
				
				% Stick all the gamma tables in a cell array.
				g = cell(1, length(GLWindow.DisplayFields.StereoHDR));
				for i = 1:length(g)
					g{i} = desiredGamma.(GLWindow.DisplayFields.StereoHDR{i});
				end
				desiredGamma = g;
			elseif iscell(desiredGamma)
				% Make sure the user passed the right number of elements in
				% the cell array.
				assert(isvector(desiredGamma) && length(desiredGamma) == length(GLWindow.DisplayFields.StereoHDR), ...
					'GLW_ValidateGamma:InvalidDims', ...
					'Gamma passed as a cell array must have %d elements in Stereo HDR mode.', ...
					length(GLWindow.DisplayFields.StereoHDR));
			else
				error('In Stereo HDR mode the gamma must be passed as a struct or cell array.');
			end
			
		otherwise
			error('Invalid display type "%s".', displayTypeID);
	end
end

% Make sure all values are in the [0,1] range and that each gamma table is
% of proper dimensions.
for i = 1:length(desiredGamma)
	d = desiredGamma{i};
	
	if ~isnumeric(d)
		error('Each element of the desired gamma cell array must be numeric.');
	end
	
	% Each gamma element must be a 256x3 matrix.
	if ndims(d) ~= 2 || ~all(size(d) == [256 3])
		error('Gamma must be a 256x3 matrix.');
	end
	
	if any(d(:) > 1) || any(d(:) < 0)
		error('Gamma values must be in the range [0,1].');
	end
end

validatedGamma = desiredGamma;
