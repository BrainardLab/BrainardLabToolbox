function validatedImageData = GLW_ValidateImageData(imageData, displayTypeID)
% validatedImageData = GLW_ValidateImageData(imageData, displayTypeID)
%
% Description:
% Validates image data to make sure it's in the proper range and format.
%
% Input:
% imageData (MxNx3|struct|cell array) - The image data to be validated.
% displayTypeID (integer) - The display ID type of the GLWindow.
%   This value should be generated by GLW_ValidateDisplayType.
%
% Output:
% validatedImageData (cell array) - The validated image data with each
%   window's image data in its cell.

switch displayTypeID
	case {GLWindow.DisplayTypes.Normal, GLWindow.DisplayTypes.BitsPP}
		if ndims(imageData) ~= 3 || ~size(imageData, 3) == 3
			error('imageData must be a MxNx3 array.');
		end
		
		imageData = {imageData};
		
	case {GLWindow.DisplayTypes.Stereo, GLWindow.DisplayTypes.StereoBitsPP}
		if isstruct(imageData)
			% Validate the fields in the imageData struct.
			GLW_ValidateStructFields(imageData, {'left', 'right'});
			
			imageData = {imageData.left, imageData.right};
		elseif iscell(imageData)
			if ndims(imageData) ~= 2 || ~all(size(imageData) == [1 2])
				error('imageData must be a 1x2 cell array.');
			end
		else
			error('In stereo mode imageData must be a struct or cell array.');
		end
		
	case GLWindow.DisplayTypes.HDR
		if isstruct(imageData)
			% Validate the fields in the imageData struct.
			GLW_ValidateStructFields(imageData, {'front', 'back'});
			
			imageData = {imageData.front, imageData.back};
		elseif iscell(imageData)
			if ndims(imageData) ~= 2 || ~all(size(imageData) == [1 2])
				error('imageData must be a 1x2 cell array.');
			end
		else
			error('In HDR mode imageData must be a struct or cell array.');
		end
		
	otherwise
		error('Invalid display type ID %d.\n', displayTypeID);
end

% Make sure the image data is in the range [0,1].
for i = 1:length(imageData)
	if any(imageData{i}(:)) < 0 || any(imageData{i}(:) > 1)
		error('imageData must contain values in the range [0,1].');
	end
end

validatedImageData = imageData;
